/**
 * @module src/GetConcordances
 *
 * Component that display GetConcordances
 * Accepts the following properties:
 *  - language: Ethnologue code of the language
 *  - version: version of source language
 *  - revision : Autogenerated for each updation of this same source
 *  - token: Translated tokens in the form of xls file
*/

import React, { Component } from 'react';
import './App.css';
import Header from './Header';
import Footer from './Footer';
import ListLanguages from './Component/ListLanguages';
import Versions from './Component/Versions';
import RevisionNumber from './Component/RevisionNumber';
import $ from 'jquery';
import GlobalURL from './GlobalURL';

class GetConcordances extends Component {
  constructor(props) {
    super(props);
    
    this.state = {
      language:'',
      version: '',
      revision: '',
      token: '',
      showModal: false,
      uploaded:'uploadingStatus',
      getVersions: [],
      getRevision: [],
      getTargetLanguages: '',
      disabled: false
    }
    // Upload file specific callback handlers
    this.onSelect = this.onSelect.bind(this);
    this.onSelectSource = this.onSelectSource.bind(this);
    this.onSelectRevision = this.onSelectRevision.bind(this);
    this.onSelectVersion = this.onSelectVersion.bind(this);
    this.getConcordances = this.getConcordances.bind(this);
    this.generateConcordance = this.generateConcordance.bind(this);
  }


  componentWillMount() {
      var _this = this;
      let accessToken = JSON.parse(window.localStorage.getItem('access_token')) 
      $.ajax({
      url: GlobalURL["hostURL"]+"/v1/languagelist",
      contentType: "application/json; charset=utf-8",
      method : "GET",
      headers: {
                "Authorization": "bearer " + accessToken
      },
      success: function (result) {
        var getTargetLang = JSON.parse(result);
        _this.setState({getTargetLanguages: getTargetLang})
      },
      error: function (error) {
      }
    });
  }

  onSelect(e) {
    this.setState({
      [e.target.name]: e.target.value });
  }

  //onSelectSource for Dynamic Versions
  onSelectSource(e) {
      this.setState({ Sourcelanguage: e.target.value });
      var _this = this;
      let accessToken = JSON.parse(window.localStorage.getItem('access_token')) 
      var data = { 
        "language": e.target.value
      }
      $.ajax({
      url: GlobalURL["hostURL"]+"/v1/version",
      contentType: "application/json; charset=utf-8",
      data : JSON.stringify(data),
      method : "POST",
      headers: {
        "Authorization": "bearer " + accessToken
      },
      success: function (result) {
        var getVer = JSON.parse(result);
        _this.setState({getVersions: getVer.length > 0 ? getVer : []})
      },
      error: function (error) {
      }
    });
  }

  //onSelectVersion for Dynamic Revision
  onSelectVersion(e) {
      this.setState({ Version: e.target.value });
      var _this = this;
      let accessToken = JSON.parse(window.localStorage.getItem('access_token')) 
      var data = { 
        "language": this.state.Sourcelanguage, "version" : e.target.value
      }
      $.ajax({
      url: GlobalURL["hostURL"]+"/v1/revision",
      contentType: "application/json; charset=utf-8",
      data : JSON.stringify(data),
      method : "POST",
      headers: {
        "Authorization": "bearer " + accessToken
      },
      success: function (result) {
        var getRev = JSON.parse(result);
        _this.setState({getRevision: getRev.length > 0 ? getRev : []})
      },
      error: function (error) {
      }
    });
  }
  
//onchange revision number
  onSelectRevision(e){
    this.setState({Revision: e.target.value });
  }

//To get concordances for a particular token
  getConcordances(e){
    e.preventDefault();
    var _this = this
    var data = {
      "language": this.state.Sourcelanguage, "version": this.state.Version, "revision": this.state.Revision, "token": this.state.token
    }
    let accessToken = JSON.parse(window.localStorage.getItem('access_token'))
    
    $.ajax({
      url: GlobalURL["hostURL"]+"/v1/getconcordance",
      contentType: "application/json; charset=utf-8",
      data : JSON.stringify(data),
      method : "POST",
      headers: {
                "Authorization": "bearer " + accessToken
      },
      beforeSend: function () {
        $(".modal").show();
      },
      complete: function () {
        $(".modal").hide();
      },
      success: function (result) {
        result = JSON.parse(result)
        if(result.success !== false){
          $("#get_concordances").val(result);
        }else {
           _this.setState({message: result.message, uploaded: 'failure'})
            setTimeout(function(){
              _this.setState({uploaded: 'fail'});
            }, 5000);
          }
      },
      error: function (error) {
        _this.setState({uploaded:'failure'}) 
        setTimeout(function(){
          _this.setState({uploaded: 'fail'});
        }, 5000);
      }
    });      
  }

// For Generating Concordance
  generateConcordance(e){
    e.preventDefault();
    var _this = this
    var data = {
      "language": this.state.Sourcelanguage, "version": this.state.Version, "revision": this.state.Revision
    }

    let accessToken = JSON.parse(window.localStorage.getItem('access_token'))
    $.ajax({
      url: GlobalURL["hostURL"]+"/v1/generateconcordance",
      contentType: "application/json; charset=utf-8",
      data : JSON.stringify(data),
      method : "POST",
      headers: {
        "Authorization": "bearer " + accessToken
      },
      beforeSend: function () {
        $(".modal").show();
      },
      complete: function () {
        $(".modal").hide();
      },
      success: function (result) {
        result = JSON.parse(result)
        if(result.success !== false){
          _this.setState({message: result.message, uploaded: 'success'})
          setTimeout(function(){
            _this.setState({uploaded: 'fail'});
          }, 5000);
        } else {
          _this.setState({message: result.message, uploaded: 'failure'})
          setTimeout(function(){
            _this.setState({uploaded: 'fail'});
          }, 5000);
        }
      },
      error: function (error) {
       _this.setState({message: error.message, uploaded: 'failure'})
        setTimeout(function(){
          _this.setState({uploaded: 'fail'});
        }, 5000);
      }
    });  
  }


  render() {
    return(
      <div className="container">
        <Header/ >
        <div className="row">
          <form className="col-md-12 uploader" id="upload_form" encType="multipart/form-data">
            <h1 className="source-headerCon1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Concordance</h1>&nbsp;
            <div className={"alert " + (this.state.uploaded === 'success'? 'alert-success msg' : 'invisible')}>
              <strong>{this.state.message}</strong>
            </div>
            <div className={"alert " + (this.state.uploaded === 'failure'? 'alert-danger msg': 'invisible')}>
              <strong>{this.state.message}</strong>
            </div>&nbsp;&nbsp;&nbsp;&nbsp;
            <div className="form-inline Concord1">&nbsp;&nbsp;&nbsp;&nbsp;
              <lable className="control-label Concord2"> <strong> Language </strong> </lable>
                <ListLanguages 
                  onChange={this.onSelectSource}
                  Language={this.state.getTargetLanguages}
                />
              <lable className="control-lable Concord2"> <strong> Version </strong> </lable>
                <Versions 
                  version={this.state.getVersions} 
                  onChange={this.onSelectVersion} 
                />
              <lable className="control-lable Concord2"> <strong> Revision </strong> </lable>
                <RevisionNumber
                  revision={this.state.getRevision}
                  onChange={this.onSelectRevision} 
                />
              <a href="#" onClick={this.generateConcordance} title="Generate Concordance"><span className="glyphicon glyphicon-refresh customLink2"></span></a> 
              <lable className="control-lable Concord2"> <strong>Token </strong> </lable>
                  <input value={this.state.token} onChange={this.onSelect} name="token" type="text"  placeholder="token" className="form-control"/> 
              </div>&nbsp;
              <div >
                <button id="btnGet" type="button" className="btn btn-success ConcordButton" onClick={this.getConcordances} disabled={!this.state.Revision} ><span className="glyphicon glyphicon-search">&nbsp;</span>Search Concordance</button>&nbsp;&nbsp;
                <textarea value="" type="text" id="get_concordances" name="get concordance" placeholder="Search Results" className="form-control textarea" />&nbsp;&nbsp;&nbsp;&nbsp;
              </div>
              <div className="modal" style={{display: 'none'}}>
                <div className="center">
                  <img alt="" src={require('./Images/loader.gif')} />
                </div>
              </div>
          </form>
          </div>
        <Footer/>
      </div>
      );
    }
}

export default GetConcordances;
